const http = require('http');

var keepAliveAgent = new http.Agent({
    keepAlive: true,
    keepAliveMsecs: 2000,
    maxSockets: 101,
    maxFreeSockets: 100
});
http.get({
    hostname: 'localhost',
    port: 80,
    path: '/',
    agent: keepAliveAgent
}, (res) => {
    console.info(res.socket);
});

/*
IncomingMessage {
    _readableState: ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: true,
        needReadable: false,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null
    },
    readable: true,
    domain: null,
    _events: { end: [Function: responseOnEnd] },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
        _connecting: false,
        _hadError: false,
        _handle: TCP {
            _externalStream: {},
            fd: 13,
            reading: true,
            owner: [Circular],
            onread: [Function: onread],
            onconnection: null,
            writeQueueSize: 0
        },
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [],
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            defaultEncoding: 'utf8',
            ranOut: false,
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null,
            resumeScheduled: false
        },
        readable: true,
        domain: null,
        _events: {
            end: [Object],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            free: [Function: onFree],
            close: [Object],
            agentRemove: [Function: onRemove],
            drain: [Function: ondrain],
            error: [Function: socketErrorListener],
            data: [Function: socketOnData]
        },
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function],
            writecb: null,
            writelen: 0,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false
        },
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        bytesRead: 1618,
        _bytesDispatched: 59,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            _headers: [],
            _url: '',
            _consumed: false,
            socket: [Circular],
            incoming: [Circular],
            maxHeaderPairs: 2000,
            onIncoming: [Function: parserOnIncomingClient]
        },
        _httpMessage: ClientRequest {
            domain: null,
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            output: [],
            outputEncodings: [],
            outputCallbacks: [],
            outputSize: 0,
            writable: true,
            _last: true,
            chunkedEncoding: false,
            shouldKeepAlive: true,
            useChunkedEncodingByDefault: false,
            sendDate: false,
            _removedHeader: {},
            _contentLength: 0,
            _hasBody: true,
            _trailer: '',
            finished: true,
            _headerSent: true,
            socket: [Circular],
            connection: [Circular],
            _header: 'GET / HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\n\r\n',
            _headers: [Object],
            _headerNames: [Object],
            _onPendingData: null,
            agent: [Object],
            socketPath: undefined,
            method: 'GET',
            path: '/',
            parser: [Object],
            res: [Circular]
        },
        read: [Function],
        _consuming: true
    },
    connection: Socket {
        _connecting: false,
        _hadError: false,
        _handle: TCP {
            _externalStream: {},
            fd: 13,
            reading: true,
            owner: [Circular],
            onread: [Function: onread],
            onconnection: null,
            writeQueueSize: 0
        },
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [],
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            defaultEncoding: 'utf8',
            ranOut: false,
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null,
            resumeScheduled: false
        },
        readable: true,
        domain: null,
        _events: {
            end: [Object],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            free: [Function: onFree],
            close: [Object],
            agentRemove: [Function: onRemove],
            drain: [Function: ondrain],
            error: [Function: socketErrorListener],
            data: [Function: socketOnData]
        },
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function],
            writecb: null,
            writelen: 0,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false
        },
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        bytesRead: 1618,
        _bytesDispatched: 59,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            _headers: [],
            _url: '',
            _consumed: false,
            socket: [Circular],
            incoming: [Circular],
            maxHeaderPairs: 2000,
            onIncoming: [Function: parserOnIncomingClient]
        },
        _httpMessage: ClientRequest {
            domain: null,
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            output: [],
            outputEncodings: [],
            outputCallbacks: [],
            outputSize: 0,
            writable: true,
            _last: true,
            chunkedEncoding: false,
            shouldKeepAlive: true,
            useChunkedEncodingByDefault: false,
            sendDate: false,
            _removedHeader: {},
            _contentLength: 0,
            _hasBody: true,
            _trailer: '',
            finished: true,
            _headerSent: true,
            socket: [Circular],
            connection: [Circular],
            _header: 'GET / HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\n\r\n',
            _headers: [Object],
            _headerNames: [Object],
            _onPendingData: null,
            agent: [Object],
            socketPath: undefined,
            method: 'GET',
            path: '/',
            parser: [Object],
            res: [Circular]
        },
        read: [Function],
        _consuming: true
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
        date: 'Mon, 06 Jun 2016 09:21:07 GMT',
        server: 'Apache/2.4.18 (Unix)',
        'last-modified': 'Mon, 23 May 2016 15:15:18 GMT',
        etag: '"536-53383e8802d80"',
        'accept-ranges': 'bytes',
        'content-length': '1334',
        'keep-alive': 'timeout=5, max=100',
        connection: 'Keep-Alive',
        'content-type': 'text/html'
    },
    rawHeaders: ['Date',
        'Mon, 06 Jun 2016 09:21:07 GMT',
        'Server',
        'Apache/2.4.18 (Unix)',
        'Last-Modified',
        'Mon, 23 May 2016 15:15:18 GMT',
        'ETag',
        '"536-53383e8802d80"',
        'Accept-Ranges',
        'bytes',
        'Content-Length',
        '1334',
        'Keep-Alive',
        'timeout=5, max=100',
        'Connection',
        'Keep-Alive',
        'Content-Type',
        'text/html'
    ],
    trailers: {},
    rawTrailers: [],
    upgrade: false,
    url: '',
    method: null,
    statusCode: 200,
    statusMessage: 'OK',
    client: Socket {
        _connecting: false,
        _hadError: false,
        _handle: TCP {
            _externalStream: {},
            fd: 13,
            reading: true,
            owner: [Circular],
            onread: [Function: onread],
            onconnection: null,
            writeQueueSize: 0
        },
        _parent: null,
        _host: 'localhost',
        _readableState: ReadableState {
            objectMode: false,
            highWaterMark: 16384,
            buffer: [],
            length: 0,
            pipes: null,
            pipesCount: 0,
            flowing: true,
            ended: false,
            endEmitted: false,
            reading: false,
            sync: false,
            needReadable: true,
            emittedReadable: false,
            readableListening: false,
            defaultEncoding: 'utf8',
            ranOut: false,
            awaitDrain: 0,
            readingMore: false,
            decoder: null,
            encoding: null,
            resumeScheduled: false
        },
        readable: true,
        domain: null,
        _events: {
            end: [Object],
            finish: [Function: onSocketFinish],
            _socketEnd: [Function: onSocketEnd],
            free: [Function: onFree],
            close: [Object],
            agentRemove: [Function: onRemove],
            drain: [Function: ondrain],
            error: [Function: socketErrorListener],
            data: [Function: socketOnData]
        },
        _eventsCount: 9,
        _maxListeners: undefined,
        _writableState: WritableState {
            objectMode: false,
            highWaterMark: 16384,
            needDrain: false,
            ending: false,
            ended: false,
            finished: false,
            decodeStrings: false,
            defaultEncoding: 'utf8',
            length: 0,
            writing: false,
            corked: 0,
            sync: false,
            bufferProcessing: false,
            onwrite: [Function],
            writecb: null,
            writelen: 0,
            bufferedRequest: null,
            lastBufferedRequest: null,
            pendingcb: 0,
            prefinished: false,
            errorEmitted: false
        },
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        bytesRead: 1618,
        _bytesDispatched: 59,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            _headers: [],
            _url: '',
            _consumed: false,
            socket: [Circular],
            incoming: [Circular],
            maxHeaderPairs: 2000,
            onIncoming: [Function: parserOnIncomingClient]
        },
        _httpMessage: ClientRequest {
            domain: null,
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            output: [],
            outputEncodings: [],
            outputCallbacks: [],
            outputSize: 0,
            writable: true,
            _last: true,
            chunkedEncoding: false,
            shouldKeepAlive: true,
            useChunkedEncodingByDefault: false,
            sendDate: false,
            _removedHeader: {},
            _contentLength: 0,
            _hasBody: true,
            _trailer: '',
            finished: true,
            _headerSent: true,
            socket: [Circular],
            connection: [Circular],
            _header: 'GET / HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\n\r\n',
            _headers: [Object],
            _headerNames: [Object],
            _onPendingData: null,
            agent: [Object],
            socketPath: undefined,
            method: 'GET',
            path: '/',
            parser: [Object],
            res: [Circular]
        },
        read: [Function],
        _consuming: true
    },
    _consuming: false,
    _dumped: false,
    req: ClientRequest {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedHeader: {},
        _contentLength: 0,
        _hasBody: true,
        _trailer: '',
        finished: true,
        _headerSent: true,
        socket: Socket {
            _connecting: false,
            _hadError: false,
            _handle: [Object],
            _parent: null,
            _host: 'localhost',
            _readableState: [Object],
            readable: true,
            domain: null,
            _events: [Object],
            _eventsCount: 9,
            _maxListeners: undefined,
            _writableState: [Object],
            writable: true,
            allowHalfOpen: false,
            destroyed: false,
            bytesRead: 1618,
            _bytesDispatched: 59,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            parser: [Object],
            _httpMessage: [Circular],
            read: [Function],
            _consuming: true
        },
        connection: Socket {
            _connecting: false,
            _hadError: false,
            _handle: [Object],
            _parent: null,
            _host: 'localhost',
            _readableState: [Object],
            readable: true,
            domain: null,
            _events: [Object],
            _eventsCount: 9,
            _maxListeners: undefined,
            _writableState: [Object],
            writable: true,
            allowHalfOpen: false,
            destroyed: false,
            bytesRead: 1618,
            _bytesDispatched: 59,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            parser: [Object],
            _httpMessage: [Circular],
            read: [Function],
            _consuming: true
        },
        _header: 'GET / HTTP/1.1\r\nHost: localhost\r\nConnection: keep-alive\r\n\r\n',
        _headers: { host: 'localhost' },
        _headerNames: { host: 'Host' },
        _onPendingData: null,
        agent: Agent {
            domain: null,
            _events: [Object],
            _eventsCount: 1,
            _maxListeners: undefined,
            defaultPort: 80,
            protocol: 'http:',
            options: [Object],
            requests: {},
            sockets: [Object],
            freeSockets: {},
            keepAliveMsecs: 2000,
            keepAlive: true,
            maxSockets: 101,
            maxFreeSockets: 100
        },
        socketPath: undefined,
        method: 'GET',
        path: '/',
        parser: HTTPParser {
            '0': [Function: parserOnHeaders],
            '1': [Function: parserOnHeadersComplete],
            '2': [Function: parserOnBody],
            '3': [Function: parserOnMessageComplete],
            _headers: [],
            _url: '',
            _consumed: false,
            socket: [Object],
            incoming: [Circular],
            maxHeaderPairs: 2000,
            onIncoming: [Function: parserOnIncomingClient]
        },
        res: [Circular]
    }
}
*/
